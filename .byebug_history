c
n
notebook.attributes = { :name => "new name" }
 :notebook => notebook.attributes = { :name => "new name" }
notebook.attributes
notebook.id
c
notebook_params
c
@notebooks.map{ |n| n["release_date"]=n.delete("released")}
@notebooks.last
@notebook.last
@notebooks.map{ |n| n["release_date"]=n.delete("released")}
@notebooks.first
@notebooks.first[:release_date] = @notebooks.first.delete("released")
@notebooks.first
@notebooks
c
@notebooks
c
n
errors
params
c
@notebooks.map { |hs| hs.except("povCharacters", "mediaType", "characters") }
@notebooks.map { |hs| hs.except("characters", "") }
@notebooks.dup.tap { |hs| hs.except("characters") }
c
@notebooks.dup.tap { |hs| hs.delete("characters") }
@notebooks.dup.tap { |hs| hs.delete("povCharacters", "mediaType", "characters") }
@notebooks..dup.tap { |hs| hs.delete("povCharacters", "mediaType", "characters") }
@notebooks..dup.tap { |hs| hs.delete("povCharacters", "mediaType", "characters")) }
@notebooks.delete'!("povCharacters", "mediaType", "characters")
@notebooks.except!("povCharacters", "mediaType", "characters")
@notebooks.last.except!("povCharacters", "mediaType", "characters")
@notebooks.last.except!("povCharacters", "mediaType")
@notebooks.last.except!("povCharacters")
@notebooks.last
@notebooks.first
@notebooks
c
notebook_params
params
c
notebook
Notebook.pluck(:name)
Notebook.count
c
Notebook.pluck(:name)
Notebook.count
c
Notebook.pluck(:name)
Notebook.count
c
Notebook.pluck(:name)
Notebook.count
c
Notebook.pluck(:name)
Notebook.count
NoteBook.count
c
Notebook.pluck(:name)
Notebook.count
c
Notebookc
Notebook.count
c
Notebook.pluck(:name)
Notebook.count
c
n
Notebook.pluck(:name)
Notebook.count
c
expect(response.status).to eq 200
c
notebook2
notebook1
Notebook.count
c
Notebook.count
c
Notebook.count
c
Notebook.count
c
Notebook.count
notebook2.id 
 Notebook.count 
notebook2.id
Notebook.count
c
Notebook.count
notebook2
c
n
Notebook.count
c
Notebook.count
c
Notebook.count
c
Notebook.count
c
n
@notebook
Notebook.count
c
   29:         }.to change(Notebook, :count).by(-1)c
   28:           delete :destroy, params: {id: notebook.id, :format=> JSON}
expect {
Notebook.find(47)
notebook.id
c
Notebook.count
@notebook
@notebook.destroy!
Notebook.count
@notebook
c
n
Notebook.count
@notebook
c
params
c
params
c
params
c
n
c
json_response = JSON.parse(response.body)
hash_body.keys
 expect(hash_body.keys)
c
n
response
c
n
response.body
json_response = JSON.parse(response.body)
c
res.name
res
res = @notebook.destroy!
c
notebook_params
c
notebook_params
c
notebook_params
c
self.class.name
c
notebook_params
c
params
notebook_params
c
@notebooks.first['url']
@notebooks.first['url'].first
@notebooks.first['url']
@notebooks.first
@notebooks.class
@notebooks["url"]
@notebooks.first.class
@notebooks.first.first
@notebooks.first
@notebooks.class
c
@notebooks.last
@notebooks.first
@notebooks.class
c
@notebooks
